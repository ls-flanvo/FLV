generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  phone     String?
  role      Role      @default(USER)
  password  String
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  avatar    String?
  bookings  Booking[]
  driver    Driver?

  @@map("users")
}

model Driver {
  id               String       @id @default(cuid())
  userId           String       @unique
  surname          String
  dateOfBirth      DateTime
  taxCode          String       @unique
  address          String
  city             String
  province         String
  zipCode          String
  licenseNumber    String
  licenseExpiry    DateTime
  cqcNumber        String
  cqcExpiry        DateTime
  vehicleBrand     String
  vehicleModel     String
  vehicleYear      Int
  licensePlate     String       @unique
  vehicleColor     String
  seats            Int
  insuranceCompany String
  insuranceNumber  String
  insuranceExpiry  DateTime
  status           DriverStatus @default(PENDING)
  approved         Boolean      @default(false)
  approvedAt       DateTime?
  rejectionReason  String?
  availability     String       @default("fulltime")
  rating           Float        @default(0)
  totalRides       Int          @default(0)
  completedRides   Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  rides            Ride[]

  @@map("drivers")
}

model Booking {
  id              String        @id @default(cuid())
  bookingCode     String        @unique
  userId          String
  flightNumber    String?
  flightDate      DateTime?
  flightTime      String?
  flightStatus    FlightStatus  @default(SCHEDULED)
  pickupAddress   String
  pickupAirport   String?
  pickupLat       Float?
  pickupLng       Float?
  dropoffAddress  String
  dropoffLat      Float?
  dropoffLng      Float?
  pickupTime      DateTime
  passengers      Int           @default(1)
  luggage         Int           @default(0)
  notes           String?
  basePrice       Float
  platformFee     Float
  totalPrice      Float
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String?
  status          BookingStatus @default(PENDING)
  cancelled       Boolean       @default(false)
  cancelledAt     DateTime?
  cancelledBy     String?
  refundEligible  Boolean       @default(false)
  refundAmount    Float?
  refundStatus    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  ride            Ride?

  @@index([userId])
  @@index([status])
  @@index([flightDate])
  @@map("bookings")
}

model Ride {
  id                 String     @id @default(cuid())
  bookingId          String     @unique
  driverId           String
  status             RideStatus @default(ASSIGNED)
  driverLat          Float?
  driverLng          Float?
  lastLocationUpdate DateTime?
  assignedAt         DateTime   @default(now())
  acceptedAt         DateTime?
  enRouteAt          DateTime?
  arrivedAt          DateTime?
  startedAt          DateTime?
  completedAt        DateTime?
  driverEarnings     Float
  platformFee        Float
  rating             Int?
  review             String?
  driverNotes        String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  booking            Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  driver             Driver     @relation(fields: [driverId], references: [id])

  @@index([driverId])
  @@index([status])
  @@map("rides")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum DriverStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum RideStatus {
  ASSIGNED
  ACCEPTED
  EN_ROUTE
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FlightStatus {
  SCHEDULED
  ACTIVE
  LANDED
  CANCELLED
  DIVERTED
  DELAYED
}
